// Mocks generated by Mockito 5.4.4 from annotations
// in expense_tracker/test/providers/expense_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i10;

import 'package:expense_tracker/src/data/dao/expense_dao.dart' as _i2;
import 'package:expense_tracker/src/data/dao/goal_dao.dart' as _i4;
import 'package:expense_tracker/src/data/database/app_database.dart' as _i11;
import 'package:expense_tracker/src/data/model/expense.dart' as _i8;
import 'package:expense_tracker/src/data/repository/expense_repository.dart'
    as _i7;
import 'package:expense_tracker/src/providers/trend_provider.dart' as _i9;
import 'package:expense_tracker/src/services/api_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:sqflite/sqflite.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeExpenseDao_0 extends _i1.SmartFake implements _i2.ExpenseDao {
  _FakeExpenseDao_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiService_1 extends _i1.SmartFake implements _i3.ApiService {
  _FakeApiService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGoalDao_2 extends _i1.SmartFake implements _i4.GoalDao {
  _FakeGoalDao_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamController_3<T> extends _i1.SmartFake
    implements _i5.StreamController<T> {
  _FakeStreamController_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseExecutor_4 extends _i1.SmartFake
    implements _i6.DatabaseExecutor {
  _FakeDatabaseExecutor_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i7.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseDao get expenseDao => (super.noSuchMethod(
        Invocation.getter(#expenseDao),
        returnValue: _FakeExpenseDao_0(
          this,
          Invocation.getter(#expenseDao),
        ),
      ) as _i2.ExpenseDao);

  @override
  _i3.ApiService get apiService => (super.noSuchMethod(
        Invocation.getter(#apiService),
        returnValue: _FakeApiService_1(
          this,
          Invocation.getter(#apiService),
        ),
      ) as _i3.ApiService);

  @override
  _i5.Future<List<_i8.Expense>> getAllExpenses() => (super.noSuchMethod(
        Invocation.method(
          #getAllExpenses,
          [],
        ),
        returnValue: _i5.Future<List<_i8.Expense>>.value(<_i8.Expense>[]),
      ) as _i5.Future<List<_i8.Expense>>);

  @override
  _i5.Future<Map<String, dynamic>> syncExpensesWithBackend(
          List<_i8.Expense>? expenses) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncExpensesWithBackend,
          [expenses],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<List<_i8.Expense>> getExpensesByType(bool? isInflow) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpensesByType,
          [isInflow],
        ),
        returnValue: _i5.Future<List<_i8.Expense>>.value(<_i8.Expense>[]),
      ) as _i5.Future<List<_i8.Expense>>);

  @override
  _i5.Future<List<_i8.Expense>> getExpensesByCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpensesByCategory,
          [category],
        ),
        returnValue: _i5.Future<List<_i8.Expense>>.value(<_i8.Expense>[]),
      ) as _i5.Future<List<_i8.Expense>>);

  @override
  _i5.Future<List<String>> getCategoriesByType(bool? isInflow) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoriesByType,
          [isInflow],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<_i8.Expense>> getExpensesBetweenDates(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpensesBetweenDates,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i5.Future<List<_i8.Expense>>.value(<_i8.Expense>[]),
      ) as _i5.Future<List<_i8.Expense>>);

  @override
  _i5.Future<double> getTotalBetweenDates(
    bool? isInflow,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalBetweenDates,
          [
            isInflow,
            startDate,
            endDate,
          ],
        ),
        returnValue: _i5.Future<double>.value(0.0),
      ) as _i5.Future<double>);

  @override
  _i5.Future<void> addExpense(_i8.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #addExpense,
          [expense],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateExpense(_i8.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #updateExpense,
          [expense],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteExpense(_i8.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #deleteExpense,
          [expense],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [TrendProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrendProvider extends _i1.Mock implements _i9.TrendProvider {
  MockTrendProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> updateTrendData(Map<String, dynamic>? trendResponse) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTrendData,
          [trendResponse],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void clearTrendData() => super.noSuchMethod(
        Invocation.method(
          #clearTrendData,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i11.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ExpenseDao get expenseDao => (super.noSuchMethod(
        Invocation.getter(#expenseDao),
        returnValue: _FakeExpenseDao_0(
          this,
          Invocation.getter(#expenseDao),
        ),
      ) as _i2.ExpenseDao);

  @override
  _i4.GoalDao get goalDao => (super.noSuchMethod(
        Invocation.getter(#goalDao),
        returnValue: _FakeGoalDao_2(
          this,
          Invocation.getter(#goalDao),
        ),
      ) as _i4.GoalDao);

  @override
  _i5.StreamController<String> get changeListener => (super.noSuchMethod(
        Invocation.getter(#changeListener),
        returnValue: _FakeStreamController_3<String>(
          this,
          Invocation.getter(#changeListener),
        ),
      ) as _i5.StreamController<String>);

  @override
  set changeListener(_i5.StreamController<String>? _changeListener) =>
      super.noSuchMethod(
        Invocation.setter(
          #changeListener,
          _changeListener,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.DatabaseExecutor get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabaseExecutor_4(
          this,
          Invocation.getter(#database),
        ),
      ) as _i6.DatabaseExecutor);

  @override
  set database(_i6.DatabaseExecutor? _database) => super.noSuchMethod(
        Invocation.setter(
          #database,
          _database,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [ExpenseDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseDao extends _i1.Mock implements _i2.ExpenseDao {
  MockExpenseDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i8.Expense>> getAllExpenses() => (super.noSuchMethod(
        Invocation.method(
          #getAllExpenses,
          [],
        ),
        returnValue: _i5.Future<List<_i8.Expense>>.value(<_i8.Expense>[]),
      ) as _i5.Future<List<_i8.Expense>>);

  @override
  _i5.Future<List<_i8.Expense>> getExpensesByType(bool? isInflow) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpensesByType,
          [isInflow],
        ),
        returnValue: _i5.Future<List<_i8.Expense>>.value(<_i8.Expense>[]),
      ) as _i5.Future<List<_i8.Expense>>);

  @override
  _i5.Future<List<_i8.Expense>> getExpensesByCategory(String? category) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpensesByCategory,
          [category],
        ),
        returnValue: _i5.Future<List<_i8.Expense>>.value(<_i8.Expense>[]),
      ) as _i5.Future<List<_i8.Expense>>);

  @override
  _i5.Future<List<String>> getCategoriesByType(bool? isInflow) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoriesByType,
          [isInflow],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<List<_i8.Expense>> getExpensesBetweenDates(
    String? startDate,
    String? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getExpensesBetweenDates,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i5.Future<List<_i8.Expense>>.value(<_i8.Expense>[]),
      ) as _i5.Future<List<_i8.Expense>>);

  @override
  _i5.Future<double?> getTotalBetweenDates(
    bool? isInflow,
    String? startDate,
    String? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTotalBetweenDates,
          [
            isInflow,
            startDate,
            endDate,
          ],
        ),
        returnValue: _i5.Future<double?>.value(),
      ) as _i5.Future<double?>);

  @override
  _i5.Future<void> insertExpense(_i8.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #insertExpense,
          [expense],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateExpense(_i8.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #updateExpense,
          [expense],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteExpense(_i8.Expense? expense) => (super.noSuchMethod(
        Invocation.method(
          #deleteExpense,
          [expense],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i3.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i12.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i5.Future<Map<String, dynamic>> signUp({
    required String? name,
    required String? profession,
    required String? photo,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #name: name,
            #profession: profession,
            #photo: photo,
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<Map<String, dynamic>> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<Map<String, dynamic>> getUserProfile(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [userId],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);

  @override
  _i5.Future<Map<String, dynamic>> sendExpenses(List<_i8.Expense>? expenses) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendExpenses,
          [expenses],
        ),
        returnValue:
            _i5.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i5.Future<Map<String, dynamic>>);
}
